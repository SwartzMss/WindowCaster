// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: windowcaster.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_windowcaster_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_windowcaster_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_windowcaster_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_windowcaster_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_windowcaster_2eproto;
namespace windowcaster {
class ClientRequest;
struct ClientRequestDefaultTypeInternal;
extern ClientRequestDefaultTypeInternal _ClientRequest_default_instance_;
class GetWindowList;
struct GetWindowListDefaultTypeInternal;
extern GetWindowListDefaultTypeInternal _GetWindowList_default_instance_;
class Image;
struct ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class RenderCommand;
struct RenderCommandDefaultTypeInternal;
extern RenderCommandDefaultTypeInternal _RenderCommand_default_instance_;
class ServerResponse;
struct ServerResponseDefaultTypeInternal;
extern ServerResponseDefaultTypeInternal _ServerResponse_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class StopRender;
struct StopRenderDefaultTypeInternal;
extern StopRenderDefaultTypeInternal _StopRender_default_instance_;
class Video;
struct VideoDefaultTypeInternal;
extern VideoDefaultTypeInternal _Video_default_instance_;
class WindowInfo;
struct WindowInfoDefaultTypeInternal;
extern WindowInfoDefaultTypeInternal _WindowInfo_default_instance_;
class WindowList;
struct WindowListDefaultTypeInternal;
extern WindowListDefaultTypeInternal _WindowList_default_instance_;
}  // namespace windowcaster
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace windowcaster {

// ===================================================================


// -------------------------------------------------------------------

class WindowInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:windowcaster.WindowInfo) */ {
 public:
  inline WindowInfo() : WindowInfo(nullptr) {}
  ~WindowInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WindowInfo(::google::protobuf::internal::ConstantInitialized);

  inline WindowInfo(const WindowInfo& from)
      : WindowInfo(nullptr, from) {}
  WindowInfo(WindowInfo&& from) noexcept
    : WindowInfo() {
    *this = ::std::move(from);
  }

  inline WindowInfo& operator=(const WindowInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowInfo& operator=(WindowInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WindowInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const WindowInfo* internal_default_instance() {
    return reinterpret_cast<const WindowInfo*>(
               &_WindowInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WindowInfo& a, WindowInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WindowInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WindowInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WindowInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WindowInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WindowInfo& from) {
    WindowInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WindowInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "windowcaster.WindowInfo";
  }
  protected:
  explicit WindowInfo(::google::protobuf::Arena* arena);
  WindowInfo(::google::protobuf::Arena* arena, const WindowInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kClassNameFieldNumber = 3,
    kHandleFieldNumber = 1,
  };
  // string title = 2;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string class_name = 3;
  void clear_class_name() ;
  const std::string& class_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_name(Arg_&& arg, Args_... args);
  std::string* mutable_class_name();
  PROTOBUF_NODISCARD std::string* release_class_name();
  void set_allocated_class_name(std::string* value);

  private:
  const std::string& _internal_class_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_name(
      const std::string& value);
  std::string* _internal_mutable_class_name();

  public:
  // uint64 handle = 1;
  void clear_handle() ;
  ::uint64_t handle() const;
  void set_handle(::uint64_t value);

  private:
  ::uint64_t _internal_handle() const;
  void _internal_set_handle(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:windowcaster.WindowInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      47, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr class_name_;
    ::uint64_t handle_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_windowcaster_2eproto;
};// -------------------------------------------------------------------

class Video final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:windowcaster.Video) */ {
 public:
  inline Video() : Video(nullptr) {}
  ~Video() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Video(::google::protobuf::internal::ConstantInitialized);

  inline Video(const Video& from)
      : Video(nullptr, from) {}
  Video(Video&& from) noexcept
    : Video() {
    *this = ::std::move(from);
  }

  inline Video& operator=(const Video& from) {
    CopyFrom(from);
    return *this;
  }
  inline Video& operator=(Video&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Video& default_instance() {
    return *internal_default_instance();
  }
  static inline const Video* internal_default_instance() {
    return reinterpret_cast<const Video*>(
               &_Video_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Video& a, Video& b) {
    a.Swap(&b);
  }
  inline void Swap(Video* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Video* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Video* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Video>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Video& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Video& from) {
    Video::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Video* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "windowcaster.Video";
  }
  protected:
  explicit Video(::google::protobuf::Arena* arena);
  Video(::google::protobuf::Arena* arena, const Video& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameDataFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // bytes frame_data = 1;
  void clear_frame_data() ;
  const std::string& frame_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_frame_data(Arg_&& arg, Args_... args);
  std::string* mutable_frame_data();
  PROTOBUF_NODISCARD std::string* release_frame_data();
  void set_allocated_frame_data(std::string* value);

  private:
  const std::string& _internal_frame_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame_data(
      const std::string& value);
  std::string* _internal_mutable_frame_data();

  public:
  // uint32 width = 2;
  void clear_width() ;
  ::uint32_t width() const;
  void set_width(::uint32_t value);

  private:
  ::uint32_t _internal_width() const;
  void _internal_set_width(::uint32_t value);

  public:
  // uint32 height = 3;
  void clear_height() ;
  ::uint32_t height() const;
  void set_height(::uint32_t value);

  private:
  ::uint32_t _internal_height() const;
  void _internal_set_height(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:windowcaster.Video)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr frame_data_;
    ::uint32_t width_;
    ::uint32_t height_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_windowcaster_2eproto;
};// -------------------------------------------------------------------

class StopRender final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:windowcaster.StopRender) */ {
 public:
  inline StopRender() : StopRender(nullptr) {}
  ~StopRender() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StopRender(::google::protobuf::internal::ConstantInitialized);

  inline StopRender(const StopRender& from)
      : StopRender(nullptr, from) {}
  StopRender(StopRender&& from) noexcept
    : StopRender() {
    *this = ::std::move(from);
  }

  inline StopRender& operator=(const StopRender& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRender& operator=(StopRender&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopRender& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopRender* internal_default_instance() {
    return reinterpret_cast<const StopRender*>(
               &_StopRender_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StopRender& a, StopRender& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRender* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRender* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopRender* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopRender>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StopRender& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StopRender& from) {
    StopRender::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StopRender* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "windowcaster.StopRender";
  }
  protected:
  explicit StopRender(::google::protobuf::Arena* arena);
  StopRender(::google::protobuf::Arena* arena, const StopRender& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetWindowFieldNumber = 1,
  };
  // uint64 target_window = 1;
  void clear_target_window() ;
  ::uint64_t target_window() const;
  void set_target_window(::uint64_t value);

  private:
  ::uint64_t _internal_target_window() const;
  void _internal_set_target_window(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:windowcaster.StopRender)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint64_t target_window_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_windowcaster_2eproto;
};// -------------------------------------------------------------------

class Status final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:windowcaster.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Status(::google::protobuf::internal::ConstantInitialized);

  inline Status(const Status& from)
      : Status(nullptr, from) {}
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Status& from) {
    Status::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Status* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "windowcaster.Status";
  }
  protected:
  explicit Status(::google::protobuf::Arena* arena);
  Status(::google::protobuf::Arena* arena, const Status& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // bytes message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:windowcaster.Status)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_windowcaster_2eproto;
};// -------------------------------------------------------------------

class Image final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:windowcaster.Image) */ {
 public:
  inline Image() : Image(nullptr) {}
  ~Image() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Image(::google::protobuf::internal::ConstantInitialized);

  inline Image(const Image& from)
      : Image(nullptr, from) {}
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Image& default_instance() {
    return *internal_default_instance();
  }
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Image* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Image* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Image& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Image& from) {
    Image::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Image* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "windowcaster.Image";
  }
  protected:
  explicit Image(::google::protobuf::Arena* arena);
  Image(::google::protobuf::Arena* arena, const Image& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // bytes data = 1;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // uint32 width = 2;
  void clear_width() ;
  ::uint32_t width() const;
  void set_width(::uint32_t value);

  private:
  ::uint32_t _internal_width() const;
  void _internal_set_width(::uint32_t value);

  public:
  // uint32 height = 3;
  void clear_height() ;
  ::uint32_t height() const;
  void set_height(::uint32_t value);

  private:
  ::uint32_t _internal_height() const;
  void _internal_set_height(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:windowcaster.Image)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::uint32_t width_;
    ::uint32_t height_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_windowcaster_2eproto;
};// -------------------------------------------------------------------

class GetWindowList final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:windowcaster.GetWindowList) */ {
 public:
  inline GetWindowList() : GetWindowList(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetWindowList(::google::protobuf::internal::ConstantInitialized);

  inline GetWindowList(const GetWindowList& from)
      : GetWindowList(nullptr, from) {}
  GetWindowList(GetWindowList&& from) noexcept
    : GetWindowList() {
    *this = ::std::move(from);
  }

  inline GetWindowList& operator=(const GetWindowList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWindowList& operator=(GetWindowList&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetWindowList& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWindowList* internal_default_instance() {
    return reinterpret_cast<const GetWindowList*>(
               &_GetWindowList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetWindowList& a, GetWindowList& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWindowList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWindowList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetWindowList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetWindowList>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetWindowList& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetWindowList& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "windowcaster.GetWindowList";
  }
  protected:
  explicit GetWindowList(::google::protobuf::Arena* arena);
  GetWindowList(::google::protobuf::Arena* arena, const GetWindowList& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:windowcaster.GetWindowList)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_windowcaster_2eproto;
};// -------------------------------------------------------------------

class WindowList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:windowcaster.WindowList) */ {
 public:
  inline WindowList() : WindowList(nullptr) {}
  ~WindowList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WindowList(::google::protobuf::internal::ConstantInitialized);

  inline WindowList(const WindowList& from)
      : WindowList(nullptr, from) {}
  WindowList(WindowList&& from) noexcept
    : WindowList() {
    *this = ::std::move(from);
  }

  inline WindowList& operator=(const WindowList& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowList& operator=(WindowList&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WindowList& default_instance() {
    return *internal_default_instance();
  }
  static inline const WindowList* internal_default_instance() {
    return reinterpret_cast<const WindowList*>(
               &_WindowList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WindowList& a, WindowList& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WindowList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WindowList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WindowList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WindowList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WindowList& from) {
    WindowList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WindowList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "windowcaster.WindowList";
  }
  protected:
  explicit WindowList(::google::protobuf::Arena* arena);
  WindowList(::google::protobuf::Arena* arena, const WindowList& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWindowsFieldNumber = 1,
  };
  // repeated .windowcaster.WindowInfo windows = 1;
  int windows_size() const;
  private:
  int _internal_windows_size() const;

  public:
  void clear_windows() ;
  ::windowcaster::WindowInfo* mutable_windows(int index);
  ::google::protobuf::RepeatedPtrField< ::windowcaster::WindowInfo >*
      mutable_windows();
  private:
  const ::google::protobuf::RepeatedPtrField<::windowcaster::WindowInfo>& _internal_windows() const;
  ::google::protobuf::RepeatedPtrField<::windowcaster::WindowInfo>* _internal_mutable_windows();
  public:
  const ::windowcaster::WindowInfo& windows(int index) const;
  ::windowcaster::WindowInfo* add_windows();
  const ::google::protobuf::RepeatedPtrField< ::windowcaster::WindowInfo >&
      windows() const;
  // @@protoc_insertion_point(class_scope:windowcaster.WindowList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::windowcaster::WindowInfo > windows_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_windowcaster_2eproto;
};// -------------------------------------------------------------------

class RenderCommand final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:windowcaster.RenderCommand) */ {
 public:
  inline RenderCommand() : RenderCommand(nullptr) {}
  ~RenderCommand() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RenderCommand(::google::protobuf::internal::ConstantInitialized);

  inline RenderCommand(const RenderCommand& from)
      : RenderCommand(nullptr, from) {}
  RenderCommand(RenderCommand&& from) noexcept
    : RenderCommand() {
    *this = ::std::move(from);
  }

  inline RenderCommand& operator=(const RenderCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenderCommand& operator=(RenderCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RenderCommand& default_instance() {
    return *internal_default_instance();
  }
  enum ContentCase {
    kImage = 2,
    kVideo = 3,
    CONTENT_NOT_SET = 0,
  };

  static inline const RenderCommand* internal_default_instance() {
    return reinterpret_cast<const RenderCommand*>(
               &_RenderCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RenderCommand& a, RenderCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(RenderCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenderCommand* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RenderCommand* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RenderCommand>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RenderCommand& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RenderCommand& from) {
    RenderCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RenderCommand* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "windowcaster.RenderCommand";
  }
  protected:
  explicit RenderCommand(::google::protobuf::Arena* arena);
  RenderCommand(::google::protobuf::Arena* arena, const RenderCommand& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetWindowFieldNumber = 1,
    kImageFieldNumber = 2,
    kVideoFieldNumber = 3,
  };
  // uint64 target_window = 1;
  void clear_target_window() ;
  ::uint64_t target_window() const;
  void set_target_window(::uint64_t value);

  private:
  ::uint64_t _internal_target_window() const;
  void _internal_set_target_window(::uint64_t value);

  public:
  // .windowcaster.Image image = 2;
  bool has_image() const;
  private:
  bool _internal_has_image() const;

  public:
  void clear_image() ;
  const ::windowcaster::Image& image() const;
  PROTOBUF_NODISCARD ::windowcaster::Image* release_image();
  ::windowcaster::Image* mutable_image();
  void set_allocated_image(::windowcaster::Image* value);
  void unsafe_arena_set_allocated_image(::windowcaster::Image* value);
  ::windowcaster::Image* unsafe_arena_release_image();

  private:
  const ::windowcaster::Image& _internal_image() const;
  ::windowcaster::Image* _internal_mutable_image();

  public:
  // .windowcaster.Video video = 3;
  bool has_video() const;
  private:
  bool _internal_has_video() const;

  public:
  void clear_video() ;
  const ::windowcaster::Video& video() const;
  PROTOBUF_NODISCARD ::windowcaster::Video* release_video();
  ::windowcaster::Video* mutable_video();
  void set_allocated_video(::windowcaster::Video* value);
  void unsafe_arena_set_allocated_video(::windowcaster::Video* value);
  ::windowcaster::Video* unsafe_arena_release_video();

  private:
  const ::windowcaster::Video& _internal_video() const;
  ::windowcaster::Video* _internal_mutable_video();

  public:
  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:windowcaster.RenderCommand)
 private:
  class _Internal;
  void set_has_image();
  void set_has_video();

  inline bool has_content() const;
  inline void clear_has_content();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint64_t target_window_;
    union ContentUnion {
      constexpr ContentUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::windowcaster::Image* image_;
      ::windowcaster::Video* video_;
    } content_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_windowcaster_2eproto;
};// -------------------------------------------------------------------

class ServerResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:windowcaster.ServerResponse) */ {
 public:
  inline ServerResponse() : ServerResponse(nullptr) {}
  ~ServerResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ServerResponse(::google::protobuf::internal::ConstantInitialized);

  inline ServerResponse(const ServerResponse& from)
      : ServerResponse(nullptr, from) {}
  ServerResponse(ServerResponse&& from) noexcept
    : ServerResponse() {
    *this = ::std::move(from);
  }

  inline ServerResponse& operator=(const ServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerResponse& operator=(ServerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerResponse* internal_default_instance() {
    return reinterpret_cast<const ServerResponse*>(
               &_ServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerResponse& a, ServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ServerResponse& from) {
    ServerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ServerResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "windowcaster.ServerResponse";
  }
  protected:
  explicit ServerResponse(::google::protobuf::Arena* arena);
  ServerResponse(::google::protobuf::Arena* arena, const ServerResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kWindowListFieldNumber = 2,
  };
  // .windowcaster.Status status = 1;
  bool has_status() const;
  void clear_status() ;
  const ::windowcaster::Status& status() const;
  PROTOBUF_NODISCARD ::windowcaster::Status* release_status();
  ::windowcaster::Status* mutable_status();
  void set_allocated_status(::windowcaster::Status* value);
  void unsafe_arena_set_allocated_status(::windowcaster::Status* value);
  ::windowcaster::Status* unsafe_arena_release_status();

  private:
  const ::windowcaster::Status& _internal_status() const;
  ::windowcaster::Status* _internal_mutable_status();

  public:
  // .windowcaster.WindowList window_list = 2;
  bool has_window_list() const;
  void clear_window_list() ;
  const ::windowcaster::WindowList& window_list() const;
  PROTOBUF_NODISCARD ::windowcaster::WindowList* release_window_list();
  ::windowcaster::WindowList* mutable_window_list();
  void set_allocated_window_list(::windowcaster::WindowList* value);
  void unsafe_arena_set_allocated_window_list(::windowcaster::WindowList* value);
  ::windowcaster::WindowList* unsafe_arena_release_window_list();

  private:
  const ::windowcaster::WindowList& _internal_window_list() const;
  ::windowcaster::WindowList* _internal_mutable_window_list();

  public:
  // @@protoc_insertion_point(class_scope:windowcaster.ServerResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::windowcaster::Status* status_;
    ::windowcaster::WindowList* window_list_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_windowcaster_2eproto;
};// -------------------------------------------------------------------

class ClientRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:windowcaster.ClientRequest) */ {
 public:
  inline ClientRequest() : ClientRequest(nullptr) {}
  ~ClientRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClientRequest(::google::protobuf::internal::ConstantInitialized);

  inline ClientRequest(const ClientRequest& from)
      : ClientRequest(nullptr, from) {}
  ClientRequest(ClientRequest&& from) noexcept
    : ClientRequest() {
    *this = ::std::move(from);
  }

  inline ClientRequest& operator=(const ClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientRequest& operator=(ClientRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientRequest& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kGetWindowList = 1,
    kRenderCommand = 2,
    kStopRender = 3,
    REQUEST_NOT_SET = 0,
  };

  static inline const ClientRequest* internal_default_instance() {
    return reinterpret_cast<const ClientRequest*>(
               &_ClientRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientRequest& a, ClientRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ClientRequest& from) {
    ClientRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ClientRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "windowcaster.ClientRequest";
  }
  protected:
  explicit ClientRequest(::google::protobuf::Arena* arena);
  ClientRequest(::google::protobuf::Arena* arena, const ClientRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGetWindowListFieldNumber = 1,
    kRenderCommandFieldNumber = 2,
    kStopRenderFieldNumber = 3,
  };
  // .windowcaster.GetWindowList get_window_list = 1;
  bool has_get_window_list() const;
  private:
  bool _internal_has_get_window_list() const;

  public:
  void clear_get_window_list() ;
  const ::windowcaster::GetWindowList& get_window_list() const;
  PROTOBUF_NODISCARD ::windowcaster::GetWindowList* release_get_window_list();
  ::windowcaster::GetWindowList* mutable_get_window_list();
  void set_allocated_get_window_list(::windowcaster::GetWindowList* value);
  void unsafe_arena_set_allocated_get_window_list(::windowcaster::GetWindowList* value);
  ::windowcaster::GetWindowList* unsafe_arena_release_get_window_list();

  private:
  const ::windowcaster::GetWindowList& _internal_get_window_list() const;
  ::windowcaster::GetWindowList* _internal_mutable_get_window_list();

  public:
  // .windowcaster.RenderCommand render_command = 2;
  bool has_render_command() const;
  private:
  bool _internal_has_render_command() const;

  public:
  void clear_render_command() ;
  const ::windowcaster::RenderCommand& render_command() const;
  PROTOBUF_NODISCARD ::windowcaster::RenderCommand* release_render_command();
  ::windowcaster::RenderCommand* mutable_render_command();
  void set_allocated_render_command(::windowcaster::RenderCommand* value);
  void unsafe_arena_set_allocated_render_command(::windowcaster::RenderCommand* value);
  ::windowcaster::RenderCommand* unsafe_arena_release_render_command();

  private:
  const ::windowcaster::RenderCommand& _internal_render_command() const;
  ::windowcaster::RenderCommand* _internal_mutable_render_command();

  public:
  // .windowcaster.StopRender stop_render = 3;
  bool has_stop_render() const;
  private:
  bool _internal_has_stop_render() const;

  public:
  void clear_stop_render() ;
  const ::windowcaster::StopRender& stop_render() const;
  PROTOBUF_NODISCARD ::windowcaster::StopRender* release_stop_render();
  ::windowcaster::StopRender* mutable_stop_render();
  void set_allocated_stop_render(::windowcaster::StopRender* value);
  void unsafe_arena_set_allocated_stop_render(::windowcaster::StopRender* value);
  ::windowcaster::StopRender* unsafe_arena_release_stop_render();

  private:
  const ::windowcaster::StopRender& _internal_stop_render() const;
  ::windowcaster::StopRender* _internal_mutable_stop_render();

  public:
  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:windowcaster.ClientRequest)
 private:
  class _Internal;
  void set_has_get_window_list();
  void set_has_render_command();
  void set_has_stop_render();

  inline bool has_request() const;
  inline void clear_has_request();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union RequestUnion {
      constexpr RequestUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::windowcaster::GetWindowList* get_window_list_;
      ::windowcaster::RenderCommand* render_command_;
      ::windowcaster::StopRender* stop_render_;
    } request_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_windowcaster_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ClientRequest

// .windowcaster.GetWindowList get_window_list = 1;
inline bool ClientRequest::has_get_window_list() const {
  return request_case() == kGetWindowList;
}
inline bool ClientRequest::_internal_has_get_window_list() const {
  return request_case() == kGetWindowList;
}
inline void ClientRequest::set_has_get_window_list() {
  _impl_._oneof_case_[0] = kGetWindowList;
}
inline void ClientRequest::clear_get_window_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (request_case() == kGetWindowList) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.get_window_list_;
    }
    clear_has_request();
  }
}
inline ::windowcaster::GetWindowList* ClientRequest::release_get_window_list() {
  // @@protoc_insertion_point(field_release:windowcaster.ClientRequest.get_window_list)
  if (request_case() == kGetWindowList) {
    clear_has_request();
    auto* temp = _impl_.request_.get_window_list_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.get_window_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::windowcaster::GetWindowList& ClientRequest::_internal_get_window_list() const {
  return request_case() == kGetWindowList ? *_impl_.request_.get_window_list_ : reinterpret_cast<::windowcaster::GetWindowList&>(::windowcaster::_GetWindowList_default_instance_);
}
inline const ::windowcaster::GetWindowList& ClientRequest::get_window_list() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:windowcaster.ClientRequest.get_window_list)
  return _internal_get_window_list();
}
inline ::windowcaster::GetWindowList* ClientRequest::unsafe_arena_release_get_window_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:windowcaster.ClientRequest.get_window_list)
  if (request_case() == kGetWindowList) {
    clear_has_request();
    auto* temp = _impl_.request_.get_window_list_;
    _impl_.request_.get_window_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientRequest::unsafe_arena_set_allocated_get_window_list(::windowcaster::GetWindowList* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_get_window_list();
    _impl_.request_.get_window_list_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:windowcaster.ClientRequest.get_window_list)
}
inline ::windowcaster::GetWindowList* ClientRequest::_internal_mutable_get_window_list() {
  if (request_case() != kGetWindowList) {
    clear_request();
    set_has_get_window_list();
    _impl_.request_.get_window_list_ = CreateMaybeMessage<::windowcaster::GetWindowList>(GetArena());
  }
  return _impl_.request_.get_window_list_;
}
inline ::windowcaster::GetWindowList* ClientRequest::mutable_get_window_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::windowcaster::GetWindowList* _msg = _internal_mutable_get_window_list();
  // @@protoc_insertion_point(field_mutable:windowcaster.ClientRequest.get_window_list)
  return _msg;
}

// .windowcaster.RenderCommand render_command = 2;
inline bool ClientRequest::has_render_command() const {
  return request_case() == kRenderCommand;
}
inline bool ClientRequest::_internal_has_render_command() const {
  return request_case() == kRenderCommand;
}
inline void ClientRequest::set_has_render_command() {
  _impl_._oneof_case_[0] = kRenderCommand;
}
inline void ClientRequest::clear_render_command() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (request_case() == kRenderCommand) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.render_command_;
    }
    clear_has_request();
  }
}
inline ::windowcaster::RenderCommand* ClientRequest::release_render_command() {
  // @@protoc_insertion_point(field_release:windowcaster.ClientRequest.render_command)
  if (request_case() == kRenderCommand) {
    clear_has_request();
    auto* temp = _impl_.request_.render_command_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.render_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::windowcaster::RenderCommand& ClientRequest::_internal_render_command() const {
  return request_case() == kRenderCommand ? *_impl_.request_.render_command_ : reinterpret_cast<::windowcaster::RenderCommand&>(::windowcaster::_RenderCommand_default_instance_);
}
inline const ::windowcaster::RenderCommand& ClientRequest::render_command() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:windowcaster.ClientRequest.render_command)
  return _internal_render_command();
}
inline ::windowcaster::RenderCommand* ClientRequest::unsafe_arena_release_render_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:windowcaster.ClientRequest.render_command)
  if (request_case() == kRenderCommand) {
    clear_has_request();
    auto* temp = _impl_.request_.render_command_;
    _impl_.request_.render_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientRequest::unsafe_arena_set_allocated_render_command(::windowcaster::RenderCommand* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_render_command();
    _impl_.request_.render_command_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:windowcaster.ClientRequest.render_command)
}
inline ::windowcaster::RenderCommand* ClientRequest::_internal_mutable_render_command() {
  if (request_case() != kRenderCommand) {
    clear_request();
    set_has_render_command();
    _impl_.request_.render_command_ = CreateMaybeMessage<::windowcaster::RenderCommand>(GetArena());
  }
  return _impl_.request_.render_command_;
}
inline ::windowcaster::RenderCommand* ClientRequest::mutable_render_command() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::windowcaster::RenderCommand* _msg = _internal_mutable_render_command();
  // @@protoc_insertion_point(field_mutable:windowcaster.ClientRequest.render_command)
  return _msg;
}

// .windowcaster.StopRender stop_render = 3;
inline bool ClientRequest::has_stop_render() const {
  return request_case() == kStopRender;
}
inline bool ClientRequest::_internal_has_stop_render() const {
  return request_case() == kStopRender;
}
inline void ClientRequest::set_has_stop_render() {
  _impl_._oneof_case_[0] = kStopRender;
}
inline void ClientRequest::clear_stop_render() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (request_case() == kStopRender) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.stop_render_;
    }
    clear_has_request();
  }
}
inline ::windowcaster::StopRender* ClientRequest::release_stop_render() {
  // @@protoc_insertion_point(field_release:windowcaster.ClientRequest.stop_render)
  if (request_case() == kStopRender) {
    clear_has_request();
    auto* temp = _impl_.request_.stop_render_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.stop_render_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::windowcaster::StopRender& ClientRequest::_internal_stop_render() const {
  return request_case() == kStopRender ? *_impl_.request_.stop_render_ : reinterpret_cast<::windowcaster::StopRender&>(::windowcaster::_StopRender_default_instance_);
}
inline const ::windowcaster::StopRender& ClientRequest::stop_render() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:windowcaster.ClientRequest.stop_render)
  return _internal_stop_render();
}
inline ::windowcaster::StopRender* ClientRequest::unsafe_arena_release_stop_render() {
  // @@protoc_insertion_point(field_unsafe_arena_release:windowcaster.ClientRequest.stop_render)
  if (request_case() == kStopRender) {
    clear_has_request();
    auto* temp = _impl_.request_.stop_render_;
    _impl_.request_.stop_render_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientRequest::unsafe_arena_set_allocated_stop_render(::windowcaster::StopRender* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_stop_render();
    _impl_.request_.stop_render_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:windowcaster.ClientRequest.stop_render)
}
inline ::windowcaster::StopRender* ClientRequest::_internal_mutable_stop_render() {
  if (request_case() != kStopRender) {
    clear_request();
    set_has_stop_render();
    _impl_.request_.stop_render_ = CreateMaybeMessage<::windowcaster::StopRender>(GetArena());
  }
  return _impl_.request_.stop_render_;
}
inline ::windowcaster::StopRender* ClientRequest::mutable_stop_render() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::windowcaster::StopRender* _msg = _internal_mutable_stop_render();
  // @@protoc_insertion_point(field_mutable:windowcaster.ClientRequest.stop_render)
  return _msg;
}

inline bool ClientRequest::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void ClientRequest::clear_has_request() {
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}
inline ClientRequest::RequestCase ClientRequest::request_case() const {
  return ClientRequest::RequestCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ServerResponse

// .windowcaster.Status status = 1;
inline bool ServerResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline void ServerResponse::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::windowcaster::Status& ServerResponse::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::windowcaster::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::windowcaster::Status&>(::windowcaster::_Status_default_instance_);
}
inline const ::windowcaster::Status& ServerResponse::status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:windowcaster.ServerResponse.status)
  return _internal_status();
}
inline void ServerResponse::unsafe_arena_set_allocated_status(::windowcaster::Status* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = reinterpret_cast<::windowcaster::Status*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:windowcaster.ServerResponse.status)
}
inline ::windowcaster::Status* ServerResponse::release_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::windowcaster::Status* released = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::windowcaster::Status* ServerResponse::unsafe_arena_release_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:windowcaster.ServerResponse.status)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::windowcaster::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::windowcaster::Status* ServerResponse::_internal_mutable_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::windowcaster::Status>(GetArena());
    _impl_.status_ = reinterpret_cast<::windowcaster::Status*>(p);
  }
  return _impl_.status_;
}
inline ::windowcaster::Status* ServerResponse::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::windowcaster::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:windowcaster.ServerResponse.status)
  return _msg;
}
inline void ServerResponse::set_allocated_status(::windowcaster::Status* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::windowcaster::Status*>(_impl_.status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::windowcaster::Status*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.status_ = reinterpret_cast<::windowcaster::Status*>(value);
  // @@protoc_insertion_point(field_set_allocated:windowcaster.ServerResponse.status)
}

// .windowcaster.WindowList window_list = 2;
inline bool ServerResponse::has_window_list() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.window_list_ != nullptr);
  return value;
}
inline void ServerResponse::clear_window_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.window_list_ != nullptr) _impl_.window_list_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::windowcaster::WindowList& ServerResponse::_internal_window_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::windowcaster::WindowList* p = _impl_.window_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::windowcaster::WindowList&>(::windowcaster::_WindowList_default_instance_);
}
inline const ::windowcaster::WindowList& ServerResponse::window_list() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:windowcaster.ServerResponse.window_list)
  return _internal_window_list();
}
inline void ServerResponse::unsafe_arena_set_allocated_window_list(::windowcaster::WindowList* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.window_list_);
  }
  _impl_.window_list_ = reinterpret_cast<::windowcaster::WindowList*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:windowcaster.ServerResponse.window_list)
}
inline ::windowcaster::WindowList* ServerResponse::release_window_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::windowcaster::WindowList* released = _impl_.window_list_;
  _impl_.window_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::windowcaster::WindowList* ServerResponse::unsafe_arena_release_window_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:windowcaster.ServerResponse.window_list)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::windowcaster::WindowList* temp = _impl_.window_list_;
  _impl_.window_list_ = nullptr;
  return temp;
}
inline ::windowcaster::WindowList* ServerResponse::_internal_mutable_window_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.window_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::windowcaster::WindowList>(GetArena());
    _impl_.window_list_ = reinterpret_cast<::windowcaster::WindowList*>(p);
  }
  return _impl_.window_list_;
}
inline ::windowcaster::WindowList* ServerResponse::mutable_window_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::windowcaster::WindowList* _msg = _internal_mutable_window_list();
  // @@protoc_insertion_point(field_mutable:windowcaster.ServerResponse.window_list)
  return _msg;
}
inline void ServerResponse::set_allocated_window_list(::windowcaster::WindowList* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::windowcaster::WindowList*>(_impl_.window_list_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::windowcaster::WindowList*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.window_list_ = reinterpret_cast<::windowcaster::WindowList*>(value);
  // @@protoc_insertion_point(field_set_allocated:windowcaster.ServerResponse.window_list)
}

// -------------------------------------------------------------------

// Status

// bool success = 1;
inline void Status::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool Status::success() const {
  // @@protoc_insertion_point(field_get:windowcaster.Status.success)
  return _internal_success();
}
inline void Status::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:windowcaster.Status.success)
}
inline bool Status::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void Status::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// bytes message = 2;
inline void Status::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Status::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:windowcaster.Status.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Status::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:windowcaster.Status.message)
}
inline std::string* Status::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:windowcaster.Status.message)
  return _s;
}
inline const std::string& Status::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void Status::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* Status::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* Status::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:windowcaster.Status.message)
  return _impl_.message_.Release();
}
inline void Status::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:windowcaster.Status.message)
}

// -------------------------------------------------------------------

// GetWindowList

// -------------------------------------------------------------------

// WindowList

// repeated .windowcaster.WindowInfo windows = 1;
inline int WindowList::_internal_windows_size() const {
  return _internal_windows().size();
}
inline int WindowList::windows_size() const {
  return _internal_windows_size();
}
inline void WindowList::clear_windows() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.windows_.Clear();
}
inline ::windowcaster::WindowInfo* WindowList::mutable_windows(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:windowcaster.WindowList.windows)
  return _internal_mutable_windows()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::windowcaster::WindowInfo>* WindowList::mutable_windows()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:windowcaster.WindowList.windows)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_windows();
}
inline const ::windowcaster::WindowInfo& WindowList::windows(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:windowcaster.WindowList.windows)
  return _internal_windows().Get(index);
}
inline ::windowcaster::WindowInfo* WindowList::add_windows() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::windowcaster::WindowInfo* _add = _internal_mutable_windows()->Add();
  // @@protoc_insertion_point(field_add:windowcaster.WindowList.windows)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::windowcaster::WindowInfo>& WindowList::windows() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:windowcaster.WindowList.windows)
  return _internal_windows();
}
inline const ::google::protobuf::RepeatedPtrField<::windowcaster::WindowInfo>&
WindowList::_internal_windows() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.windows_;
}
inline ::google::protobuf::RepeatedPtrField<::windowcaster::WindowInfo>*
WindowList::_internal_mutable_windows() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.windows_;
}

// -------------------------------------------------------------------

// WindowInfo

// uint64 handle = 1;
inline void WindowInfo::clear_handle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.handle_ = ::uint64_t{0u};
}
inline ::uint64_t WindowInfo::handle() const {
  // @@protoc_insertion_point(field_get:windowcaster.WindowInfo.handle)
  return _internal_handle();
}
inline void WindowInfo::set_handle(::uint64_t value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:windowcaster.WindowInfo.handle)
}
inline ::uint64_t WindowInfo::_internal_handle() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.handle_;
}
inline void WindowInfo::_internal_set_handle(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.handle_ = value;
}

// string title = 2;
inline void WindowInfo::clear_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& WindowInfo::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:windowcaster.WindowInfo.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WindowInfo::set_title(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:windowcaster.WindowInfo.title)
}
inline std::string* WindowInfo::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:windowcaster.WindowInfo.title)
  return _s;
}
inline const std::string& WindowInfo::_internal_title() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.title_.Get();
}
inline void WindowInfo::_internal_set_title(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(value, GetArena());
}
inline std::string* WindowInfo::_internal_mutable_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* WindowInfo::release_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:windowcaster.WindowInfo.title)
  return _impl_.title_.Release();
}
inline void WindowInfo::set_allocated_title(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:windowcaster.WindowInfo.title)
}

// string class_name = 3;
inline void WindowInfo::clear_class_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_name_.ClearToEmpty();
}
inline const std::string& WindowInfo::class_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:windowcaster.WindowInfo.class_name)
  return _internal_class_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WindowInfo::set_class_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:windowcaster.WindowInfo.class_name)
}
inline std::string* WindowInfo::mutable_class_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_class_name();
  // @@protoc_insertion_point(field_mutable:windowcaster.WindowInfo.class_name)
  return _s;
}
inline const std::string& WindowInfo::_internal_class_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.class_name_.Get();
}
inline void WindowInfo::_internal_set_class_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class_name_.Set(value, GetArena());
}
inline std::string* WindowInfo::_internal_mutable_class_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.class_name_.Mutable( GetArena());
}
inline std::string* WindowInfo::release_class_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:windowcaster.WindowInfo.class_name)
  return _impl_.class_name_.Release();
}
inline void WindowInfo::set_allocated_class_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.class_name_.IsDefault()) {
          _impl_.class_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:windowcaster.WindowInfo.class_name)
}

// -------------------------------------------------------------------

// RenderCommand

// uint64 target_window = 1;
inline void RenderCommand::clear_target_window() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.target_window_ = ::uint64_t{0u};
}
inline ::uint64_t RenderCommand::target_window() const {
  // @@protoc_insertion_point(field_get:windowcaster.RenderCommand.target_window)
  return _internal_target_window();
}
inline void RenderCommand::set_target_window(::uint64_t value) {
  _internal_set_target_window(value);
  // @@protoc_insertion_point(field_set:windowcaster.RenderCommand.target_window)
}
inline ::uint64_t RenderCommand::_internal_target_window() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.target_window_;
}
inline void RenderCommand::_internal_set_target_window(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.target_window_ = value;
}

// .windowcaster.Image image = 2;
inline bool RenderCommand::has_image() const {
  return content_case() == kImage;
}
inline bool RenderCommand::_internal_has_image() const {
  return content_case() == kImage;
}
inline void RenderCommand::set_has_image() {
  _impl_._oneof_case_[0] = kImage;
}
inline void RenderCommand::clear_image() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (content_case() == kImage) {
    if (GetArena() == nullptr) {
      delete _impl_.content_.image_;
    }
    clear_has_content();
  }
}
inline ::windowcaster::Image* RenderCommand::release_image() {
  // @@protoc_insertion_point(field_release:windowcaster.RenderCommand.image)
  if (content_case() == kImage) {
    clear_has_content();
    auto* temp = _impl_.content_.image_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::windowcaster::Image& RenderCommand::_internal_image() const {
  return content_case() == kImage ? *_impl_.content_.image_ : reinterpret_cast<::windowcaster::Image&>(::windowcaster::_Image_default_instance_);
}
inline const ::windowcaster::Image& RenderCommand::image() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:windowcaster.RenderCommand.image)
  return _internal_image();
}
inline ::windowcaster::Image* RenderCommand::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:windowcaster.RenderCommand.image)
  if (content_case() == kImage) {
    clear_has_content();
    auto* temp = _impl_.content_.image_;
    _impl_.content_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RenderCommand::unsafe_arena_set_allocated_image(::windowcaster::Image* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_content();
  if (value) {
    set_has_image();
    _impl_.content_.image_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:windowcaster.RenderCommand.image)
}
inline ::windowcaster::Image* RenderCommand::_internal_mutable_image() {
  if (content_case() != kImage) {
    clear_content();
    set_has_image();
    _impl_.content_.image_ = CreateMaybeMessage<::windowcaster::Image>(GetArena());
  }
  return _impl_.content_.image_;
}
inline ::windowcaster::Image* RenderCommand::mutable_image() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::windowcaster::Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:windowcaster.RenderCommand.image)
  return _msg;
}

// .windowcaster.Video video = 3;
inline bool RenderCommand::has_video() const {
  return content_case() == kVideo;
}
inline bool RenderCommand::_internal_has_video() const {
  return content_case() == kVideo;
}
inline void RenderCommand::set_has_video() {
  _impl_._oneof_case_[0] = kVideo;
}
inline void RenderCommand::clear_video() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (content_case() == kVideo) {
    if (GetArena() == nullptr) {
      delete _impl_.content_.video_;
    }
    clear_has_content();
  }
}
inline ::windowcaster::Video* RenderCommand::release_video() {
  // @@protoc_insertion_point(field_release:windowcaster.RenderCommand.video)
  if (content_case() == kVideo) {
    clear_has_content();
    auto* temp = _impl_.content_.video_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.video_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::windowcaster::Video& RenderCommand::_internal_video() const {
  return content_case() == kVideo ? *_impl_.content_.video_ : reinterpret_cast<::windowcaster::Video&>(::windowcaster::_Video_default_instance_);
}
inline const ::windowcaster::Video& RenderCommand::video() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:windowcaster.RenderCommand.video)
  return _internal_video();
}
inline ::windowcaster::Video* RenderCommand::unsafe_arena_release_video() {
  // @@protoc_insertion_point(field_unsafe_arena_release:windowcaster.RenderCommand.video)
  if (content_case() == kVideo) {
    clear_has_content();
    auto* temp = _impl_.content_.video_;
    _impl_.content_.video_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RenderCommand::unsafe_arena_set_allocated_video(::windowcaster::Video* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_content();
  if (value) {
    set_has_video();
    _impl_.content_.video_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:windowcaster.RenderCommand.video)
}
inline ::windowcaster::Video* RenderCommand::_internal_mutable_video() {
  if (content_case() != kVideo) {
    clear_content();
    set_has_video();
    _impl_.content_.video_ = CreateMaybeMessage<::windowcaster::Video>(GetArena());
  }
  return _impl_.content_.video_;
}
inline ::windowcaster::Video* RenderCommand::mutable_video() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::windowcaster::Video* _msg = _internal_mutable_video();
  // @@protoc_insertion_point(field_mutable:windowcaster.RenderCommand.video)
  return _msg;
}

inline bool RenderCommand::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void RenderCommand::clear_has_content() {
  _impl_._oneof_case_[0] = CONTENT_NOT_SET;
}
inline RenderCommand::ContentCase RenderCommand::content_case() const {
  return RenderCommand::ContentCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// StopRender

// uint64 target_window = 1;
inline void StopRender::clear_target_window() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.target_window_ = ::uint64_t{0u};
}
inline ::uint64_t StopRender::target_window() const {
  // @@protoc_insertion_point(field_get:windowcaster.StopRender.target_window)
  return _internal_target_window();
}
inline void StopRender::set_target_window(::uint64_t value) {
  _internal_set_target_window(value);
  // @@protoc_insertion_point(field_set:windowcaster.StopRender.target_window)
}
inline ::uint64_t StopRender::_internal_target_window() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.target_window_;
}
inline void StopRender::_internal_set_target_window(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.target_window_ = value;
}

// -------------------------------------------------------------------

// Image

// bytes data = 1;
inline void Image::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Image::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:windowcaster.Image.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Image::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:windowcaster.Image.data)
}
inline std::string* Image::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:windowcaster.Image.data)
  return _s;
}
inline const std::string& Image::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void Image::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.Set(value, GetArena());
}
inline std::string* Image::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* Image::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:windowcaster.Image.data)
  return _impl_.data_.Release();
}
inline void Image::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:windowcaster.Image.data)
}

// uint32 width = 2;
inline void Image::clear_width() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.width_ = 0u;
}
inline ::uint32_t Image::width() const {
  // @@protoc_insertion_point(field_get:windowcaster.Image.width)
  return _internal_width();
}
inline void Image::set_width(::uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:windowcaster.Image.width)
}
inline ::uint32_t Image::_internal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline void Image::_internal_set_width(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.width_ = value;
}

// uint32 height = 3;
inline void Image::clear_height() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.height_ = 0u;
}
inline ::uint32_t Image::height() const {
  // @@protoc_insertion_point(field_get:windowcaster.Image.height)
  return _internal_height();
}
inline void Image::set_height(::uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:windowcaster.Image.height)
}
inline ::uint32_t Image::_internal_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline void Image::_internal_set_height(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.height_ = value;
}

// -------------------------------------------------------------------

// Video

// bytes frame_data = 1;
inline void Video::clear_frame_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.frame_data_.ClearToEmpty();
}
inline const std::string& Video::frame_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:windowcaster.Video.frame_data)
  return _internal_frame_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Video::set_frame_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.frame_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:windowcaster.Video.frame_data)
}
inline std::string* Video::mutable_frame_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_frame_data();
  // @@protoc_insertion_point(field_mutable:windowcaster.Video.frame_data)
  return _s;
}
inline const std::string& Video::_internal_frame_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.frame_data_.Get();
}
inline void Video::_internal_set_frame_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.frame_data_.Set(value, GetArena());
}
inline std::string* Video::_internal_mutable_frame_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.frame_data_.Mutable( GetArena());
}
inline std::string* Video::release_frame_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:windowcaster.Video.frame_data)
  return _impl_.frame_data_.Release();
}
inline void Video::set_allocated_frame_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.frame_data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.frame_data_.IsDefault()) {
          _impl_.frame_data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:windowcaster.Video.frame_data)
}

// uint32 width = 2;
inline void Video::clear_width() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.width_ = 0u;
}
inline ::uint32_t Video::width() const {
  // @@protoc_insertion_point(field_get:windowcaster.Video.width)
  return _internal_width();
}
inline void Video::set_width(::uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:windowcaster.Video.width)
}
inline ::uint32_t Video::_internal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline void Video::_internal_set_width(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.width_ = value;
}

// uint32 height = 3;
inline void Video::clear_height() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.height_ = 0u;
}
inline ::uint32_t Video::height() const {
  // @@protoc_insertion_point(field_get:windowcaster.Video.height)
  return _internal_height();
}
inline void Video::set_height(::uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:windowcaster.Video.height)
}
inline ::uint32_t Video::_internal_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline void Video::_internal_set_height(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.height_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace windowcaster


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_windowcaster_2eproto_2epb_2eh
